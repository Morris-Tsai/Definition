多型可區分為
1.靜態多型(Static Polymorphism)
2.動態多型(Dynamic Polymorphism)

靜態多型:編譯時期就知道執行方式，包含
1.運算子(Operator)多型
  如1+1與+5
2.函數(function)多型
  如int max(int,int)與double max(doouble,double)
動態多型:執行時期才知道執行方式
1.父參考(Reference)指向子物件，利用覆寫執行子物件的函數

JAVA是當然的動態多型
1.父參考控制子物件
2.父子均有相同函數(覆寫函數overriding)
3.呼叫的函數是執行[子物件函數]

存取物件的唯一方式就是透過參考(reference)變數
1.一個參考只能一種型別，一旦宣告後就不能改變A
2.一個參考是一個變數，所以可以重新指派一個物件給它
3.一個參考型別決定了，可以在它所參考的物件上呼叫所在的函式
4.一個參考變數可以指向相同型態的物件或參考型別的子型態物件
5.一個參考變數可以被宣告成類別型態或介面型態

JAVA只支援單一繼承，也就是只能有一個父類別，也就是一個類別不可以繼承超過一個以上的類別
但JAVA可以實作多個介面(interface)
p.s.介面:是一個特殊的類別，所有函數成員都只宣告但沒有定義內容，等待子類別實做函數內容

只能向上轉型，不能向下轉型
向上轉型(upcasting):父參考轉型指向子物件
